/* 1. 嵌套 */
.wrapper {
    display: flex;
    align-items: center;

    span {
        color: #fff;
    }

    &-title {
        font-size: 20px;
    }

    &:hover {
        background: #7ca9f1;
    }

    /* 属性嵌套 */
    font: {
        size: 12px;
        weight: bold;
    }
}

/* 2. 变量 */
$button-primary-color: #80b0fc;

.button-primary {
    background-color: $button-primary-color;

    /* 变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量） */
    $text-color: #fff;

    span {
        color: $text-color;
    }
}

/* 数据类型 */

/* 字符串：使用 #{} (interpolation) 时，有引号字符串将被编译为无引号字符串 */
@mixin firefox-message($selector) {
    body.firefox #{$selector}:before {
        content: "Hi, Firefox users!";
    }
}

@include firefox-message(".header");

/* 数组： list */

/* Maps */

/* 颜色 */

/* 3. 运算 */
/* + - * / < > >= <= == != */
.operation {
    $font-size: 20px;
    $line-height: 1;

    width: 1px + 2px;
    height: 100% / 4;
    font: #{$font-size}/#{$line-height};

    background: #333 + #444;
    color: #333 * 2;

    cursor: e + -resize;
}

/* 颜色值的 alpha channel 可以通过 opacify 或 transparentize 两个函数进行调整 */
$translucent-red: rgba(255, 0, 0, 0.5);

p {
    color: opacify($translucent-red, 0.3);
    background-color: transparentize($translucent-red, 0.25);
}

/* 圆括号 */
p {
    width: 1em + (2em * 3);
}

/* 函数 */
.function {
    color: hsl(0, 100%, 50%);
}

// 关键词参数，增加易读性
p {
    color: hsl($hue: 0, $saturation: 100%, $lightness: 50%);
}

/* 插值语句 #{} */
$name: foo;
$attr: border;
p.#{$name} {
  #{$attr}-color: blue;
}

/* & 引用当前父选择器*/
.foo.bar .baz.bang, .bip.qux {
    $selector: &;
}

/* 
 * 变量定义 !default
 * 如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值
 * 变量是 null 空值时将视为未被 !default 赋值
 */
$content: "First content";
$content: "Second content?" !default;
$text-disabled-color: null;
$text-disabled-color: #7ca9f1 !default;

#main {
    content: $content;
    color: $text-disabled-color;
}

/* 7. @-Rules 与指令 */

// @import 允许其导入 SCSS 或 Sass 文件。被导入的文件将合并编译到同一个 CSS 文件中
// 如果需要导入 SCSS 或者 Sass 文件，但又不希望将其编译为 CSS，只需要在文件名前添加下划线

// @media
.sidebar {
    width: 300px;
    @media screen and (orientation: landscape) {
        width: 500px;
    }
}

// @extend   继承
.error {
    border: 1px #f00;
    background-color: #fdd;
}

.error.intrusion {
    background-image: url("/image/hacked.png");
}

.seriousError {
    @extend .error;
    border-width: 3px;
}

// => 编译为
.error, .seriousError {
    border: 1px #f00;
    background-color: #fdd; 
}
  
.error.intrusion, .seriousError.intrusion {
    background-image: url("/image/hacked.png"); 
}
  
.seriousError {
    border-width: 3px;
}

// @at-root
.parent {
    @at-root {
        .child1 { 

        }

        .child2 { 

        }
    }

    .step-child {

    }
}

// => 编译为
.parent {

}
.child1 {

}
.child2 {

}
.parent .step-child {

}

/* 8. 控制指令 */

// @if：当 @if 的表达式返回值不是 false 或者 null 时，条件成立，输出 {} 内的代码
p {
    @if 1 + 1 == 2 { border: 1px solid; }
    @if 5 < 3 { border: 2px dotted; }
    @if null  { border: 3px double; }
}

$type: monster;
p {
    @if $type == ocean {
        color: blue;
    }
    @else if $type == matador {
        color: red;
    }
    @else if $type == monster {
        color: green;
    }
    @else {
        color: black;
    }
}

// @for 指令包含两种格式：@for $var from <start> through <end>，或者 @for $var from <start> to <end>
// 区别在于 through 与 to 的含义：当使用 through 时，条件范围包含 <start> 与 <end> 的值，而使用 to 时条件范围只包含 <start> 的值不包含 <end> 的值
// $var 可以是任何变量，比如 $i；<start> 和 <end> 必须是整数值
@for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
}

// @each: 指令的格式是 $var in <list>, $var 可以是任何变量名， <list> 是一连串的值，也就是值列表
@each $animal in puma, sea-slug, egret, salamander {
    .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
    }
}

@each $animal, $color, $cursor in (puma, black, default), (sea-slug, blue, pointer), (egret, white, move) {
    .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
        border: 2px solid $color;
        cursor: $cursor;
    }
}

@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
    #{$header} {
        font-size: $size;
    }
}

// @while 指令重复输出格式直到表达式返回结果为 false
$i: 6;
@while $i > 0 {
    .item-#{$i} { 
        width: 2em * $i; 
    }

    $i: $i - 2;
}

/* 9. 混合指令 */

// @mixin 定义混合指令
@mixin large-text {
    font: {
        family: Arial;
        size: 20px;
        weight: bold;
    }

    color: #ff0000;
}

// @include 引用混合样式
.page-title {
    @include large-text;
    padding: 4px;
    margin-top: 10px;
}

@mixin silly-links {
    a {
        color: blue;
        background-color: red;
    }
}

@include silly-links;

@mixin compound {
    @include highlighted-background;
    @include header-text;
}

@mixin highlighted-background { background-color: #fc0; }
@mixin header-text { font-size: 20px; }

// 参数
@mixin sexy-border($color, $width: 2in) {
    border: {
        color: $color;
        width: $width;
        style: dashed;
    }
}

p { 
    @include sexy-border(blue, 1in); 
}

h1 { 
    @include sexy-border($color: blue, $width: 2in);  // 关键词参数
}

// 参数变量 不能确定混合指令需要使用多少个参数，可以使用参数变量 … 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理
@mixin box-shadow($shadows...) {
    box-shadow: $shadows;
}

.shadows {
    @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
}

// => 编译为
.shadowed {
    box-shadow: 0px 4px 5px #666, 2px 6px 10px #999;
}

// 向混合样式中导入内容
@mixin apply-to-ie6-only {
    * html {
        @content;
    }
}
  
@include apply-to-ie6-only {
    #logo {
        background-image: url(/logo.gif);
    }
}

// => 编译为
* html #logo {
    background-image: url(/logo.gif);
}

// @use
@use "sass:math";
@debug math.$pi;

@use "var";
@include var.myMixin



/* 10. 函数指令 */
$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n) {
    @return $n * $grid-width + ($n - 1) * $gutter-width;
}

#sidebar { 
    width: grid-width(5); 
}

/* 11. 输出格式 */

